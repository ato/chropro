package chropro;

import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.lang.Void;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import javax.annotation.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Generated(
    value = "chropro.Codegen",
    date = "2016-12-20T03:00:26.964Z"
)
public class InputDomain {
  private RpcClient rpcClient;

  public InputDomain(RpcClient rpcClient) {
    this.rpcClient = rpcClient;
  }

  /**
   * Dispatches a key event to the page.
   * @param type Type of the key event.
   * @param modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
   * @param timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
   * @param text Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "")
   * @param unmodifiedText Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
   * @param keyIdentifier Unique key identifier (e.g., 'U+0041') (default: "").
   * @param code Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
   * @param key Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
   * @param windowsVirtualKeyCode Windows virtual key code (default: 0).
   * @param nativeVirtualKeyCode Native virtual key code (default: 0).
   * @param autoRepeat Whether the event was generated from auto repeat (default: false).
   * @param isKeypad Whether the event was generated from the keypad (default: false).
   * @param isSystemKey Whether the event was a system key event (default: false).
   */
  public CompletableFuture<Void> dispatchKeyEvent(@NotNull String type, @Nullable Integer modifiers, @Nullable Double timestamp, @Nullable String text, @Nullable String unmodifiedText, @Nullable String keyIdentifier, @Nullable String code, @Nullable String key, @Nullable Integer windowsVirtualKeyCode, @Nullable Integer nativeVirtualKeyCode, @Nullable Boolean autoRepeat, @Nullable Boolean isKeypad, @Nullable Boolean isSystemKey) {
    Map<String,Object> params = new HashMap<>();
    params.put("type", type);
    params.put("modifiers", modifiers);
    params.put("timestamp", timestamp);
    params.put("text", text);
    params.put("unmodifiedText", unmodifiedText);
    params.put("keyIdentifier", keyIdentifier);
    params.put("code", code);
    params.put("key", key);
    params.put("windowsVirtualKeyCode", windowsVirtualKeyCode);
    params.put("nativeVirtualKeyCode", nativeVirtualKeyCode);
    params.put("autoRepeat", autoRepeat);
    params.put("isKeypad", isKeypad);
    params.put("isSystemKey", isSystemKey);
    return rpcClient.call("Input.dispatchKeyEvent", params, Void.class);
  }

  /**
   * Dispatches a mouse event to the page.
   * @param type Type of the mouse event.
   * @param x X coordinate of the event relative to the main frame's viewport.
   * @param y Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
   * @param modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
   * @param timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
   * @param button Mouse button (default: "none").
   * @param clickCount Number of times the mouse button was clicked (default: 0).
   */
  public CompletableFuture<Void> dispatchMouseEvent(@NotNull String type, @NotNull Integer x, @NotNull Integer y, @Nullable Integer modifiers, @Nullable Double timestamp, @Nullable String button, @Nullable Integer clickCount) {
    Map<String,Object> params = new HashMap<>();
    params.put("type", type);
    params.put("x", x);
    params.put("y", y);
    params.put("modifiers", modifiers);
    params.put("timestamp", timestamp);
    params.put("button", button);
    params.put("clickCount", clickCount);
    return rpcClient.call("Input.dispatchMouseEvent", params, Void.class);
  }

  /**
   * Dispatches a touch event to the page.
   * @param type Type of the touch event.
   * @param touchPoints Touch points.
   * @param modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
   * @param timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
   */
  public CompletableFuture<Void> dispatchTouchEvent(@NotNull String type, @NotNull List<TouchPoint> touchPoints, @Nullable Integer modifiers, @Nullable Double timestamp) {
    Map<String,Object> params = new HashMap<>();
    params.put("type", type);
    params.put("touchPoints", touchPoints);
    params.put("modifiers", modifiers);
    params.put("timestamp", timestamp);
    return rpcClient.call("Input.dispatchTouchEvent", params, Void.class);
  }

  /**
   * Emulates touch event from the mouse event parameters.
   * @param type Type of the mouse event.
   * @param x X coordinate of the mouse pointer in DIP.
   * @param y Y coordinate of the mouse pointer in DIP.
   * @param timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
   * @param button Mouse button.
   * @param deltaX X delta in DIP for mouse wheel event (default: 0).
   * @param deltaY Y delta in DIP for mouse wheel event (default: 0).
   * @param modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
   * @param clickCount Number of times the mouse button was clicked (default: 0).
   */
  public CompletableFuture<Void> emulateTouchFromMouseEvent(@NotNull String type, @NotNull Integer x, @NotNull Integer y, @NotNull Double timestamp, @NotNull String button, @Nullable Double deltaX, @Nullable Double deltaY, @Nullable Integer modifiers, @Nullable Integer clickCount) {
    Map<String,Object> params = new HashMap<>();
    params.put("type", type);
    params.put("x", x);
    params.put("y", y);
    params.put("timestamp", timestamp);
    params.put("button", button);
    params.put("deltaX", deltaX);
    params.put("deltaY", deltaY);
    params.put("modifiers", modifiers);
    params.put("clickCount", clickCount);
    return rpcClient.call("Input.emulateTouchFromMouseEvent", params, Void.class);
  }

  /**
   * Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
   * @param x X coordinate of the start of the gesture in CSS pixels.
   * @param y Y coordinate of the start of the gesture in CSS pixels.
   * @param scaleFactor Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
   * @param relativeSpeed Relative pointer speed in pixels per second (default: 800).
   * @param gestureSourceType Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
   */
  public CompletableFuture<Void> synthesizePinchGesture(@NotNull Integer x, @NotNull Integer y, @NotNull Double scaleFactor, @Nullable Integer relativeSpeed, @Nullable String gestureSourceType) {
    Map<String,Object> params = new HashMap<>();
    params.put("x", x);
    params.put("y", y);
    params.put("scaleFactor", scaleFactor);
    params.put("relativeSpeed", relativeSpeed);
    params.put("gestureSourceType", gestureSourceType);
    return rpcClient.call("Input.synthesizePinchGesture", params, Void.class);
  }

  /**
   * Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
   * @param x X coordinate of the start of the gesture in CSS pixels.
   * @param y Y coordinate of the start of the gesture in CSS pixels.
   * @param xDistance The distance to scroll along the X axis (positive to scroll left).
   * @param yDistance The distance to scroll along the Y axis (positive to scroll up).
   * @param xOverscroll The number of additional pixels to scroll back along the X axis, in addition to the given distance.
   * @param yOverscroll The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
   * @param preventFling Prevent fling (default: true).
   * @param speed Swipe speed in pixels per second (default: 800).
   * @param gestureSourceType Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
   * @param repeatCount The number of times to repeat the gesture (default: 0).
   * @param repeatDelayMs The number of milliseconds delay between each repeat. (default: 250).
   * @param interactionMarkerName The name of the interaction markers to generate, if not empty (default: "").
   */
  public CompletableFuture<Void> synthesizeScrollGesture(@NotNull Integer x, @NotNull Integer y, @Nullable Integer xDistance, @Nullable Integer yDistance, @Nullable Integer xOverscroll, @Nullable Integer yOverscroll, @Nullable Boolean preventFling, @Nullable Integer speed, @Nullable String gestureSourceType, @Nullable Integer repeatCount, @Nullable Integer repeatDelayMs, @Nullable String interactionMarkerName) {
    Map<String,Object> params = new HashMap<>();
    params.put("x", x);
    params.put("y", y);
    params.put("xDistance", xDistance);
    params.put("yDistance", yDistance);
    params.put("xOverscroll", xOverscroll);
    params.put("yOverscroll", yOverscroll);
    params.put("preventFling", preventFling);
    params.put("speed", speed);
    params.put("gestureSourceType", gestureSourceType);
    params.put("repeatCount", repeatCount);
    params.put("repeatDelayMs", repeatDelayMs);
    params.put("interactionMarkerName", interactionMarkerName);
    return rpcClient.call("Input.synthesizeScrollGesture", params, Void.class);
  }

  /**
   * Synthesizes a tap gesture over a time period by issuing appropriate touch events.
   * @param x X coordinate of the start of the gesture in CSS pixels.
   * @param y Y coordinate of the start of the gesture in CSS pixels.
   * @param duration Duration between touchdown and touchup events in ms (default: 50).
   * @param tapCount Number of times to perform the tap (e.g. 2 for double tap, default: 1).
   * @param gestureSourceType Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
   */
  public CompletableFuture<Void> synthesizeTapGesture(@NotNull Integer x, @NotNull Integer y, @Nullable Integer duration, @Nullable Integer tapCount, @Nullable String gestureSourceType) {
    Map<String,Object> params = new HashMap<>();
    params.put("x", x);
    params.put("y", y);
    params.put("duration", duration);
    params.put("tapCount", tapCount);
    params.put("gestureSourceType", gestureSourceType);
    return rpcClient.call("Input.synthesizeTapGesture", params, Void.class);
  }

  public static class TouchPoint {
    /**
     * State of the touch point.
     */
    public String state;

    /**
     * X coordinate of the event relative to the main frame's viewport.
     */
    public Integer x;

    /**
     * Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
     */
    public Integer y;

    /**
     * X radius of the touch area (default: 1).
     */
    public Integer radiusX;

    /**
     * Y radius of the touch area (default: 1).
     */
    public Integer radiusY;

    /**
     * Rotation angle (default: 0.0).
     */
    public Double rotationAngle;

    /**
     * Force (default: 1.0).
     */
    public Double force;

    /**
     * Identifier used to track touch sources between events, must be unique within an event.
     */
    public Double id;

    public String toString() {
      return "TouchPoint{state=" + state + ", x=" + x + ", y=" + y + ", radiusX=" + radiusX + ", radiusY=" + radiusY + ", rotationAngle=" + rotationAngle + ", force=" + force + ", id=" + id + "}";
    }
  }
}
